 Application Load Balancer(ALB)
 #############
 Agenda
 what is application load balancer and auto scalling?
 
 
what is application load balancer
#################
 applicarion load balancer is a feature of Elastic load balancing that allows a developer to configire and route incomming trafiic to applicarion based in aws cloud.
 
###############
 let us say we have a java micro svc based applicarion which is running on ec2 with some path/url.
 let say some  app example
	springboot-maven-course-micro-svc
 
path
	server.servlet.context-path=/course-svc
url
	 getAllDevopsTools
	 
now  we want to give a flexibility for the user to reach their applicarion for that what we are going to do is 
we create a applicarion load balancer which will help developers or users to configire and route incomming trafiic in our applicarion which is running in aws cloud.

ALB with Manuall Process
##################
1. create server-1 in us-east-1a subnet
2. create server-2 in us-east-ab subnet

3. connect to both servers and run the applicarion using 
	java -jar filename
	OR
	if you want to run applicarion usig docker ,you can run the docker image present for your applicarion already
		or if it is not present alredy we can create a docker image and run the applicarionon docker as a contrainer.
		
4. we need to create a target group for path based routing.
in our case path is 
/course-svc/getAllDevopsTools  	which will be running on 8080 port

5. create a applicarion load balancer and add a listner on 80 port  which will forward the traffic to 8080 port which is running on the ec2 instances.

#################
i will create two instances in ec2 with different regions and different  users
	us-east-1a		54.174.95.159 		ec2-user
	us-east-1b 	3.208.23.182 		ubuntu
	
1.	lets us connect first server/ec2-user
	
2. yum install git java-11-amazon-corretto-headless -y
	 git --version
		git version 2.40.1
	 java --version
		openjdk 11.0.20 2023-07-18 LTS
		OpenJDK Runtime Environment Corretto-11.0.20.8.1 (build 11.0.20+8-LTS)
		OpenJDK 64-Bit Server VM Corretto-11.0.20.8.1 (build 11.0.20+8-LTS, mixed mode)

3. install maven
	cd /opt
	wget https://archive.apache.org/dist/maven/maven-3/3.9.3/binaries/apache-maven-3.9.3-bin.tar.gz
	tar xvf apache-maven-3.9.3-bin.tar.gz
    ls
	export PATH=$PATH:/opt/apache-maven-3.9.3/bin
	echo $PATH
			/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/opt/apache-maven-3.9.3/bin

	 
4. git clone https://github.com/MannemHaritha/springboot-maven-course-micro-svc.git
    ls
   cd springboot-maven-course-micro-svc/
   ls
   mvn clean package
	ll target/
			total 18920
			drwxr-xr-x 3 root root       47 Aug 13 12:56 classes
			drwxr-xr-x 3 root root       25 Aug 13 12:56 generated-sources
			drwxr-xr-x 3 root root       30 Aug 13 12:56 generated-test-sources
			drwxr-xr-x 2 root root       28 Aug 13 12:56 maven-archiver
			drwxr-xr-x 3 root root       35 Aug 13 12:56 maven-status
			-rw-r--r-- 1 root root 19366758 Aug 13 12:56 springboot-maven-course-micro-svc-0                                                                                      .0.1-SNAPSHOT.jar
			-rw-r--r-- 1 root root     4027 Aug 13 12:56 springboot-maven-course-micro-svc-0                                                                                      .0.1-SNAPSHOT.jar.original
			drwxr-xr-x 2 root root      167 Aug 13 12:56 surefire-reports
			drwxr-xr-x 3 root root       17 Aug 13 12:56 test-classes
			
5.	java -jar target/springboot-maven-course-micro-svc-0.0.1-SNAPSHOT.jar

			
6.	54.80.56.3:8080/course-svc/getAllDeveopsTools
			["git","maven","sonar","nexus","jenkins"]

	
2.	lets us connect second server/ubuntu

1. sudo apt install openjdk-11-jdk openjdk-11-jre -y
     java --version

2. install maven
	cd /opt
	wget https://archive.apache.org/dist/maven/maven-3/3.9.3/binaries/apache-maven-3.9.3-bin.tar.gz
	tar xvf apache-maven-3.9.3-bin.tar.gz
    ls
	cd apache-maven-3.9.3/
	pwd
	cd ..
	export PATH=$PATH:/opt/apache-maven-3.9.3/bin
	echo $PATH
			/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/opt/apache-maven-3.9.3/bin

	 
4. git clone https://github.com/MannemHaritha/springboot-maven-course-micro-svc.git
    ls
   cd springboot-maven-course-micro-svc/
   ls
   mvn clean package
	ll target/
			total 18920
			drwxr-xr-x 3 root root       47 Aug 13 12:56 classes
			drwxr-xr-x 3 root root       25 Aug 13 12:56 generated-sources
			drwxr-xr-x 3 root root       30 Aug 13 12:56 generated-test-sources
			drwxr-xr-x 2 root root       28 Aug 13 12:56 maven-archiver
			drwxr-xr-x 3 root root       35 Aug 13 12:56 maven-status
			-rw-r--r-- 1 root root 19366758 Aug 13 12:56 springboot-maven-course-micro-svc-0                                                                                      .0.1-SNAPSHOT.jar
			-rw-r--r-- 1 root root     4027 Aug 13 12:56 springboot-maven-course-micro-svc-0                                                                                      .0.1-SNAPSHOT.jar.original
			drwxr-xr-x 2 root root      167 Aug 13 12:56 surefire-reports
			drwxr-xr-x 3 root root       17 Aug 13 12:56 test-classes
			
5.	java -jar target/springboot-maven-course-micro-svc-0.0.1-SNAPSHOT.jar
		or
	nohup java -jar target/springboot-maven-course-micro-svc-0.0.1-SNAPSHOT.jar

6. 44.195.36.98:8080/course-svc/getAllDevopsTools 	


now let us create a target group and applicarion load balancer
#################
1. create a taget group
2. create a applicarion load balancer


haritha-alb-1372789870.us-east-1.elb.amazonaws.com/course-svc/getAllDevopsTools 	
	
History
#############
 cd /opt
    5  wget https://archive.apache.org/dist/maven/maven-3/3.9.3/binaries/apache-maven-3.9.3-bin.tar.gz^C
    6  [root@ip-172-31-93-166 ~]# cd /opt
    7  [root@ip-172-31-93-166 opt]#
    8  wget https://archive.apache.org/dist/maven/maven-3/3.9.3/binaries/apache-maven-3.9.3-bin.tar.gz
    9  ls
   10  tar xvf apache-maven-3.9.3-bin.tar.gz
   11  ls
	12git clone https://github.com/MannemHaritha/springboot-maven-course-micro-svc.git
   14  ls
   15  cd springboot-maven-course-micro-svc/
   16  history
   17  ls
   18  export PATH=$PATH:/opt/apache-maven-3.9.3/bin
   19  mvn clean package
   
   
   sudo apt install openjdk-11-jdk openjdk-11-jre -y
    2  java --version
    3  cd /opt
    4  wget https://archive.apache.org/dist/maven/maven-3/3.9.3/binaries/apache-maven-3.9.3-bin.tar.gz
    5  tar xvf apache-maven-3.9.3-bin.tar.gz
    6  ls
    7  cd apache-maven-3.9.3/
    8  pwd
    9  cd ..
   10  export PATH=$PATH:/opt/apache-maven-3.9.3/bin
   11  echo $PATH
   12  git clone https://github.com/MannemHaritha/springboot-maven-course-micro-svc.git
   13  ls
   14  cd springboot-maven-course-micro-svc/
   15  mvn clean package
   16  history



Application load balancer with terraform
##################
https://github.com/100daysofdevops/21_days_of_aws_using_terraform/tree/master/alb
https://100daysofdevops.com/21-days-of-aws-using-terraform-day-4-creating-application-load-balanceralb-using-terraform/


we need to write terrafoem 	scripot or code to create a Application Load Balancer
To work with terraform we need IAM user or IAM role and terraform provider and installing terraform

Now im create IAM USER
	Access key : AKIATXDHF2ARUX3D7EZP
	Secret access key: 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
		or
Now iam create IAM role
	

ALB using terraform
##################
1. We have to make sure first installl terraform on ubuntu i.each
	https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli
		 1. sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
		 2. sudo apt update
		 3. wget -O- https://apt.releases.hashicorp.com/gpg | \
		 gpg --dearmor | \
		 sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
		 4. echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
		 https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
		 sudo tee /etc/apt/sources.list.d/hashicorp.list
		 5. sudo apt-get install terraform
		 6. terraform --version
		 

2. in windows/linux we have to do terraform script i.e
		1. mkdir ekswork
		2. cd ekswork
		3. pwd
		4. ls
		
3. main.tf

resource "aws_lb_target_group" "my-target-group" {
  health_check {
    interval            = 10
    path                = "/course-svc/getAllDevopsTools"
    protocol            = "HTTP"
    timeout             = 5
    healthy_threshold   = 5
    unhealthy_threshold = 2
  }

  name        = "my-test-tg"
  port        = 8080
  protocol    = "HTTP"
  target_type = "instance"
  vpc_id      = "${var.vpc_id}"
}

/*resource "aws_lb_target_group_attachment" "my-alb-target-group-attachment1" {
  target_group_arn = "${aws_lb_target_group.my-target-group.arn}"
  target_id        = "${var.instance1_id}"
  port             = 80
}

resource "aws_lb_target_group_attachment" "my-alb-target-group-attachment2" {
  target_group_arn = "${aws_lb_target_group.my-target-group.arn}"
  target_id        = "${var.instance2_id}"
  port             = 8080
}*/

resource "aws_lb" "my-aws-alb" {
  name     = "my-test-alb"
  internal = false

  security_groups = [
    "${aws_security_group.my-alb-sg.id}",
  ]

  subnets = [
    "${var.subnet1}",
    "${var.subnet2}",
  ]

  tags = {
    Name = "my-test-alb"
  }

  ip_address_type    = "ipv4"
  load_balancer_type = "application"
}

resource "aws_lb_listener" "my-test-alb-listner" {
  load_balancer_arn = "${aws_lb.my-aws-alb.arn}"
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = "${aws_lb_target_group.my-target-group.arn}"
  }
}

resource "aws_security_group" "my-alb-sg" {
  name   = "my-alb-sg"
  vpc_id = "${var.vpc_id}"
}

resource "aws_security_group_rule" "inbound_ssh" {
  from_port         = 22
  protocol          = "tcp"
  security_group_id = "${aws_security_group.my-alb-sg.id}"
  to_port           = 22
  type              = "ingress"
  cidr_blocks       = ["0.0.0.0/0"]
}

resource "aws_security_group_rule" "inbound_http" {
  from_port         = 8080
  protocol          = "tcp"
  security_group_id = "${aws_security_group.my-alb-sg.id}"
  to_port           = 8080
  type              = "ingress"
  cidr_blocks       = ["0.0.0.0/0"]
}

resource "aws_security_group_rule" "outbound_all" {
  from_port         = 0
  protocol          = "-1"
  security_group_id = "${aws_security_group.my-alb-sg.id}"
  to_port           = 0
  type              = "egress"
  cidr_blocks       = ["0.0.0.0/0"]
}


4. provider.tf

provider "aws" {
  region = "us-east-1"
  access_key = "AKIATXDHF2ARVIZES5UV"
  secret_key = "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"
}

5. variables.tf

 variable "vpc_id" {}

/*variable "instance1_id" {}
variable "instance2_id" {}*/
variable "subnet1" {}

variable "subnet2" {}



6. outputs.tf

output "alb_dns_name" {
  value = "${aws_lb.my-aws-alb.dns_name}"
}

output "alb_target_group_arn" {
  value = "${aws_lb_target_group.my-target-group.arn}"
}


7. in terminal

	terraform init
	terraform plan
	terraform apply --auto-approve
	terraform destroy --auto-approve
