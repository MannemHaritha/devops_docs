docker swarm
#################
what is docker swarm?
what is aws ecs?

so far we are running docker containers on single machine and what if that machine is down?
what happens to the containers running on that machine?

dicker swarm
######
we need to create multiple machines into a cluster is called docker swarm.

for example i will take 2-3 machines
 
1 0r multiple machines we can make as master and other can be there as node/agent/slave

in all machines docker should be there
in master machine we will initiate the swarm


docker-master
##################
[root@docker-master ~]# docker swarm init
Swarm initialized: current node (t2muj3o0pc1thyd971q4w04ae) is now a manager.

To add a worker to this swarm, run the following command:

docker swarm join --token SWMTKN-1-19855l04hr6p06z8npjwgtzz9tv8cr64c0fr9wx29zyjo4sxso-0s181uzalwifjmksr3otkbmf8 172.31.68.26:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.


https://docs.docker.com/engine/swarm/services/

docker service create --name my_web \
                      --replicas 3 \
                      --publish published=8080,target=80 \
                      nginx

###############
docker service create --name my_nginx --replicas 3 --publish published=80,target=80 nginx:latest 

for some reason if we assume node1 is down the container which is running in node1 will be copied to node2 or master server automatically.
#################
first will down or drain the node1 and command is 

https://docs.docker.com/engine/swarm/swarm-tutorial/drain-node/

docker node update --availability drain worker1

docker node update --availability drain docker-node1

let say if master itself is down 
docker node update --availability drain docker-master

now master and node1 servers are down and the three containers are running  in node2 server.

[root@docker-node2 ~]# docker ps
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS     NAMES
8e4b052e8436   nginx:latest   "/docker-entrypoint.…"   29 seconds ago   Up 24 seconds   80/tcp    my_nginx.2.fvvn920y9xrhgwth983gmclv0
95cd9c7f3495   nginx:latest   "/docker-entrypoint.…"   29 seconds ago   Up 24 seconds   80/tcp    my_nginx.1.qcz7p4nafzs2rdlrg5eno5pps
9bc355ed308d   nginx:latest   "/docker-entrypoint.…"   27 minutes ago   Up 27 minutes   80/tcp    my_nginx.3.ijgxeuh700389n9s7d3w5scak

once master becomes available again already running container on node2 will not be copied here.
it is only available for new traffic.

docker node update --availability Active docker-master

whenever master server is actively in position also container is not running in that master server.bcz that containers are running in node2 server,so not copied to master server. master server is again running on only taking a new service.

let us say taking a new service

docker service create --name my_springboot --replicas 3 --publish published=8080,target=8080 mannemharitha/springboot-maven-course-micro-svc:14 

docker pull mannemharitha/springboot-maven-course-micro-svc:14

let us say again availability for node1 also 

docker node update --availability Active docker-node1

https://docs.docker.com/engine/reference/commandline/service_scale/

if node1 traffic  availabity is want now try to do use scale or use upro 5 container

docker service scale SERVICE=REPLICAS

docker service scale my_springboot=5 

docker master commands
###############
	1  yum install docker
    2  systemctl start docker
    3  docker swarm init
    4  docker node ls
    5  docker service ls
    6  docker service create --name my_nginx --replicas 3 --publish published=80,target=80 nginx:latest
    7  docker images
    8  docker ps
    9  docker node ls
   10  docker node update --availability drain docker-node1
   11  docker node ls
   12  docker ps
   13  docker service ls
   14  docker node update --availability drain docker-master
   15  docker node ls
   16  docker ps
   17  docker node update --availability Active docker-master
   18  docker ps
   19  docker service create --name my_springboot --replicas 3 --publish published=8080,target=8080 MannemHaritha/springboot-maven-course-micro-svc:latest
   20  docker service create --name my_springboot --replicas 3 --publish published=8080,target=8080 MannemHaritha/springboot-maven-course-micro-svc:14
   21  docker service create --name my_springboot --replicas 3 --publish published=8080,target=8080 mannemharitha/springboot-maven-course-micro-svc:14
   22  docker node ls
   23  docker ps
   24  docker node update --availability Active docker-node1
   25  docker node ls
   26  docker service scale my_springboot=5
   27  docker ps
   28  docker service create --name my_springboot --replicas 3 --publish published=8080,target=8080 mannemharitha/springboot-maven-course-micro-svc:dec1
   29  docker ps
   30  docker images
docker-node1 commands
########################
	1  yum install docker -y
    2  systemctl start docker
    3  docker swarm join --token SWMTKN-1-19855l04hr6p06z8npjwgtzz9tv8cr64c0fr9wx29zyjo4sxso-0s181uzalwifjmksr3otkbmf8 172.31.68.26:2377
    4  docker swarm leave
    5  docker swarm join --token SWMTKN-1-19855l04hr6p06z8npjwgtzz9tv8cr64c0fr9wx29zyjo4sxso-0s181uzalwifjmksr3otkbmf8 172.31.68.26:2377
    6  docker ps
    7  docker service create --name my_springboot --replicas 3 --publish published=8080,target=8080 mannemharitha/springboot-maven-course-micro-svc:dec1
    8  docker ps
docker-node2
######################
	1  yum install docker -y
    2  systemctl start docker
    3  docker swarm join --token SWMTKN-1-19855l04hr6p06z8npjwgtzz9tv8cr64c0fr9wx29zyjo4sxso-0s181uzalwifjmksr3otkbmf8 172.31.68.26:2377
    4  docker ps

